{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","ARIA","role","aria-checked","htmlFor","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d74c5f50.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  //we have used props here\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      {\" \"}\r\n      {/* // we have added `so that we can use templatelaterals */}\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n              {/* we have used \"link\"and \"to\" instead of \"href\" */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                About\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`} // we have used ternery operator here as a condition check\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              ARIA\r\n              role=\"switch\"\r\n              aria-checked=\"false\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable DarkMode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n}; // by using this we can set it to string bydefault and if we by mistake changed it into a int than it will give us an error\r\n// we can add title: propsTypes.string.isRequired this so that we should miss this bydefault and to run the code  bugfree\r\n\r\n// Navbar.defaultprops = {\r\n//     title: \"Set title here\"\r\n// } // by using this default props, if we don't set any title by mistake than this will be set as a default value\r\n","import React, { useState } from \"react\"; // we have import usestates which is a hook in react and we use hooks so that we can use class functions without creating class\r\n\r\n// Declare a new state variable, which we'll call \"count or text etc\"\r\n\r\nexport default function Textform(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newtext = \"\";\r\n    setText(newtext);\r\n  };\r\n\r\n  // how to Handle Events\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  // text = \"new text\"; - wrong way to change the state\r\n  // settext(\"new text\"); - correct way to change the state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }} // we have added double curlys 1 for javascript and 2nd for objects in javascript\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n          {/* we used onchange because we wanted to add the text as well inside the box before this wasn't happing */}\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n        }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && ( // && operator work as first that is run and if its flase than it doesn't move forward and if it true than only it runs forwards\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\n// import About from \"./components/About\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport React from \"react\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    // here we have created alerts object\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark made has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light made has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n        <Textform\n          showAlert={showAlert}\n          heading=\"Enter the text to analyze below\"\n          mode={mode}\n        />\n        {/* </Route>\n          </Switch> */}\n      </div>\n      {/* </Router> */}\n\n      {/* <About /> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}